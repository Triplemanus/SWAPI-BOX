{"version":3,"sources":["assets/star.svg","assets/star-active.svg","assets/loading.gif","components/OpeningCrawl/OpeningCrawl.js","components/Card/Card.js","components/CardContainer/CardContainer.js","components/NotFound/NotFound.js","components/Home/Home.js","apiCalls/apiCalls.js","cleanData/cleanData.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","OpeningCrawl","title","date","episode","text","hideLanding","$","click","each","document","getElementById","contentWindow","postMessage","subTitle","className","onClick","width","height","src","frameborder","allow","allowfullscreen","class","id","Card","datum","favoriteStatus","Star","alt","activeStar","CardContainer","data","favoriteCards","card","map","key","undefined","length","NotFound","Home","fetchCalls","fetchMovies","fetch","then","response","ok","Error","json","fetchCharacters","fetchPlanets","fetchVehicles","fetchPeople","people","promises","person","homeworld","name","population","species","catch","error","console","log","Promise","all","fetchSpecies","created","fetchResidents","planets","allPlanets","planet","residents","resident","terrain","climate","cleaner","cleanPeople","cleanPlanets","cleanVehicles","vehicles","results","vehicle","model","vehicle_class","passengers","App","setState","landingPage","showLanding","updateFavoriteCard","state","includes","removeCard","filter","setMovie","filmData","setPeople","peopleData","setPlanets","planetData","setVehicles","vehicleData","number","Math","floor","random","this","release_date","episode_id","opening_crawl","loader","to","exact","path","component","render","Component","Boolean","window","location","hostname","match","router","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,8VCuC5BC,EA/BM,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YAejD,OATAC,IAAE,iBAAiBC,MAAM,WACvBD,IAAE,iBAAiBE,KAAK,WACRC,SAASC,eAAe,gBAC9BC,cAAcC,YAClB,oDACA,SAKN,iCACE,kBAAC,IAAD,CACAX,MAAK,kBAhBK,CAAC,EAAG,IAAK,KAAM,MAAO,KAAM,IAAK,KAAM,MAAO,QAC7CE,IAgBXU,SAAUZ,EACVG,KAAQA,EAAOF,IAEf,4BAAQY,UAAU,aAAaC,QAAS,kBAAKV,MAA7C,oBACA,4BAAQW,MAAM,IAAIC,OAAO,IAAIC,IAAI,sFAAsFC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,IACxO,yBAAKC,MAAM,UACP,4BAAQC,GAAG,gBAAX,iB,0CCPOC,EApBF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,eACrB,OACE,6BAASZ,UAAU,QACjB,yBAAKQ,MAAM,cACT,4BAAKG,EAAM,KACPA,EAAM,IACR,yBAAKX,UAAU,mBAAmBI,IAAKS,IAAMC,IAAI,GAAGb,QAAS,kBAAMW,EAAeD,MACjFA,EAAM,IACL,yBAAKX,UAAU,mBAAmBI,IAAKW,IAAYD,IAAI,GAAGb,QAAS,kBAAMW,EAAeD,OAE9F,yBAAKX,UAAU,0BACb,2BAAIW,EAAM,IACV,2BAAIA,EAAM,IACV,2BAAIA,EAAM,IACV,uBAAGX,UAAU,aAAcW,EAAM,OCH1BK,G,MAZO,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,cAAeN,EAAqB,EAArBA,eACtCO,EAAOF,EAAKG,IAAI,SAAAT,GACpB,OAAO,kBAAC,EAAD,CAAMA,MAAOA,EAAOU,IAAKV,EAAM,GAAIC,eAAgBA,MAE5D,OACE,6BAASZ,UAAU,wBACEsB,IAAlBJ,GAAwD,IAAzBA,EAAcK,QAAgB,wBAAIvB,UAAU,qBAAd,6BAC7DmB,K,cCTMK,G,MAAW,WACtB,OACE,wFCFSC,G,MAAO,WAClB,OACE,+D,oOCLJ,IA2FeC,EA3FI,CACjBC,YAAa,WACX,OAAOC,MAAM,8BACZC,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAMC,MAAM,0CAEd,OAAOF,EAASG,UAIpBC,gBAAiB,WACf,OAAON,MAAM,gCACZC,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAMC,MAAM,0CAEd,OAAOF,EAASG,UAIpBE,aAAc,WACZ,OAAOP,MAAM,iCACZC,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAMC,MAAM,0CAEd,OAAOF,EAASG,UAIpBG,cAAe,WACb,OAAOR,MAAM,iCACZC,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAMC,MAAM,0CAEd,OAAOF,EAASG,UAIpBI,YAAa,SAACC,GACZ,IAAMC,EAAWD,EAAOlB,IAAI,SAAAoB,GAC1B,OAAOZ,MAAMY,EAAOC,WACjBZ,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAZ,GAAI,MAAK,CACbwB,UAAWxB,EAAKyB,KAChBC,WAAY1B,EAAK0B,WACjBD,KAAMF,EAAOE,KACbE,QAASJ,EAAOI,WAEjBC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAEhC,OAAOG,QAAQC,IAAIX,IAGtBY,aAAc,SAACb,GACd,IAAMC,EAAWD,EAAOlB,IAAI,SAAAoB,GAC1B,OAAOZ,MAAMY,EAAOI,SACjBf,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAZ,GAAI,O,qVAAA,IACLuB,EADK,CAER/B,GAAI+B,EAAOY,QACXR,QAAS3B,EAAKyB,SAEfG,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAEhC,OAAOG,QAAQC,IAAIX,IAGrBc,eAAgB,SAACC,GACf,IAAMC,EAAaD,EAAQlC,IAAI,SAAAoC,GAC7B,IAAMC,EAAYD,EAAOC,UAAUrC,IAAI,SAAAsC,GACrC,OAAO9B,MAAM8B,GACZ7B,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAZ,GAAI,OAAIA,EAAKyB,OAClBG,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,CAAEF,cAEhC,OAAOG,QAAQC,IAAIO,GAChB5B,KAAK,SAAA4B,GAAS,MAAK,CAClBf,KAAMc,EAAOd,KACbiB,QAASH,EAAOG,QAChBhB,WAAYa,EAAOb,WACnBiB,QAASJ,EAAOI,QAChBH,UAAWA,OAGjB,OAAOR,QAAQC,IAAIK,KCvCNM,EAhDC,CACdC,YAAa,SAACxB,GACZ,OAAOA,EAAOlB,IAAK,SAAAkB,GAUjB,MATkB,CAChBA,EAAOI,KADS,qBAEFJ,EAAOG,WAFL,mBAGJH,EAAOM,SAHH,sBAIDN,EAAOK,YACtB,KACAL,EAAOc,SACP,MAMNW,aAAc,SAACT,GACb,OAAOA,EAAQlC,IAAI,SAAAoC,GAUjB,MATkB,CAChBA,EAAOd,KADS,mBAEJc,EAAOG,SAFH,sBAGDH,EAAOb,YAHN,mBAIJa,EAAOI,SAJH,qBAKFJ,EAAOC,WACrBD,EAAOJ,SACP,MAMNY,cAAe,SAACC,GACd,OAAOA,EAASC,QAAQ9C,IAAI,SAAA+C,GAU1B,MATkB,CAChBA,EAAQzB,KADQ,iBAENyB,EAAQC,OAFF,iBAGND,EAAQE,eAHF,sBAIDF,EAAQG,YACvB,KACAH,EAAQf,SACR,O,iBC9BamB,E,YACnB,aAAe,IAAD,8BACZ,+CAYFhF,YAAc,WACZ,EAAKiF,SAAS,CAAEC,aAAa,KAdjB,EAiBdC,YAAc,WACZ,EAAKF,SAAS,CAAEC,aAAa,KAlBjB,EAqBdE,mBAAqB,SAAC/D,GACpB,GAAI,EAAKgE,MAAM1D,cAAc2D,SAASjE,GAG/B,CACLA,EAAe,IAAMA,EAAe,GACpC,IAAMkE,EAAa,EAAKF,MAAM1D,cAAc6D,OAAO,SAAA5D,GAAI,OAAIA,IAASP,IACpE,EAAK4D,SAAS,CAAEtD,cAAe4D,SAL/BlE,EAAe,IAAMA,EAAe,GACpC,EAAK4D,SAAS,CAAEtD,cAAc,GAAD,mBAAM,EAAK0D,MAAM1D,eAAjB,CAAgCN,OAxBnD,EA0DdoE,SAAW,SAACC,GACV,EAAKT,SAAS,CAAES,cA3DJ,EA8DdC,UAAY,SAACC,GACX,EAAKX,SAAS,CAAEW,gBA/DJ,EAkEdC,WAAa,SAACC,GACZ,EAAKb,SAAS,CAAEa,gBAnEJ,EAsEdC,YAAc,SAACC,GACb,EAAKf,SAAS,CAAEe,iBArEhB,EAAKX,MAAQ,CACbK,SAAU,GACVE,WAAY,GACZE,WAAY,GACZE,YAAa,GACbrE,cAAe,GACfuD,aAAa,EACb3B,MAAO,IATK,E,iFA+BO,IAAD,OACV0C,EAAUC,KAAKC,MAAM,EAAAD,KAAKE,UAA0B,EAC1DjE,EAAWC,cACVE,KAAK,SAAAZ,GAAI,OAAI,EAAK+D,SAAS/D,EAAKiD,QAAQsB,MACxC3C,MAAM,SAAAC,GAAK,OAAI,EAAK0B,SAAS,CAAE1B,YAEhCpB,EAAWQ,kBACVL,KAAK,SAAAZ,GAAI,OAAIS,EAAWW,YAAYpB,EAAKiD,WACzCrC,KAAK,SAAAZ,GAAI,OAAIS,EAAWyB,aAAalC,KACrCY,KAAK,SAAAZ,GAAI,OAAI4C,EAAQC,YAAY7C,KACjCY,KAAK,SAAAsD,GAAU,OAAI,EAAKD,UAAUC,KAClCtC,MAAM,SAAAC,GAAK,OAAI,EAAK0B,SAAS,CAAE1B,YAGhCpB,EAAWS,eACVN,KAAK,SAAAZ,GAAI,OAAIS,EAAW2B,eAAepC,EAAKiD,WAC5CrC,KAAK,SAAAZ,GAAI,OAAI4C,EAAQE,aAAa9C,KAClCY,KAAK,SAAAwD,GAAU,OAAI,EAAKD,WAAWC,KACnCxC,MAAM,SAAAC,GAAK,OAAI,EAAK0B,SAAS,CAAE1B,YAGhCpB,EAAWU,gBACVP,KAAK,SAAAZ,GAAI,OAAI4C,EAAQG,cAAc/C,KACnCY,KAAK,SAAA0D,GAAW,OAAI,EAAKD,YAAYC,KACrC1C,MAAM,SAAAC,GAAK,OAAI,EAAK0B,SAAS,CAAE1B,c,+BAmBzB,IAAD,SAC6E8C,KAAKhB,MAAlFK,EADA,EACAA,SAAUE,EADV,EACUA,WAAYE,EADtB,EACsBA,WAAYE,EADlC,EACkCA,YAAarE,EAD/C,EAC+CA,cAAeuD,EAD9D,EAC8DA,YACtE,OAEE,8BACGA,GAAmC,IAApBQ,EAAS1D,QACvB,kBAAC,EAAD,CACApC,MAAO8F,EAAS9F,MAChBC,KAAM6F,EAASY,aACfxG,QAAS4F,EAASa,WAClBxG,KAAM2F,EAASc,cACfxG,YAAaqG,KAAKrG,cAEC,IAApB0F,EAAS1D,QAAgB,yBAAKnB,IAAK4F,IAAQhG,UAAU,SAAQc,IAAI,gBAChE2D,GACF,oCACA,6BAASzE,UAAU,oBACnB,4BAAQA,UAAU,4BAA4BC,QAAS2F,KAAKlB,aAA5D,oBAGE,wBAAI1E,UAAU,yBAAd,aACA,kBAAC,IAAD,CAAMiG,GAAG,cACP,4BAAQjG,UAAU,4BAAlB,aACY,kCAAQkB,EAAcK,WAItC,6BACE,kBAAC,IAAD,CAAM0E,GAAG,WACP,4BAAQjG,UAAU,6BAAlB,WAEF,kBAAC,IAAD,CAAMiG,GAAG,YACP,4BAAQjG,UAAU,6BAAlB,YAEF,kBAAC,IAAD,CAAMiG,GAAG,aACP,4BAAQjG,UAAU,6BAAlB,cAGJ,iCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkG,OAAK,EAACC,KAAK,IAAIC,UAAW3E,IACjC,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAK,UAAUE,OAAQ,kBAAM,kBAAC,EAAD,CAAepF,KAAMkE,EAAYvE,eAAgB,EAAK+D,wBAChG,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,WAAWE,OAAQ,kBAAM,kBAAC,EAAD,CAAepF,KAAMoE,EAAYzE,eAAgB,EAAK+D,wBACjG,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,YAAYE,OAAQ,kBAAM,kBAAC,EAAD,CAAepF,KAAMsE,EAAa3E,eAAgB,EAAK+D,wBACnG,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,aAAaE,OAAQ,kBAAM,kBAAC,EAAD,CAAepF,KAAMC,EAAeA,cAAe,EAAK0D,MAAM1D,cAAeN,eAAgB,EAAK+D,wBAC/I,kBAAC,IAAD,CAAOyB,UAAW5E,Y,GAxHG8E,aCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAIJC,IAASR,OAAOO,EAAQjH,SAASC,eAAe,SDoH1C,kBAAmBkH,WACrBA,UAAUC,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC,iB","file":"static/js/main.d109df1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.d0372476.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-active.54316d8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.3d58be7b.gif\";","import React from 'react';\nimport Crawl from 'react-star-wars-crawl';\nimport 'react-star-wars-crawl/lib/index.css';\nimport './OpeningCrawl.scss'\nimport PropTypes from 'prop-types'\nimport './OpeningCrawl.scss';\nimport $ from 'jquery';\n\nconst OpeningCrawl = ({title, date, episode, text, hideLanding}) => {\n  const romanNum = () => {\n    let roman = [0, 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']\n    return roman[episode]\n  }\n\n  $('#pause-button').click(function() {\n    $('#swThemeAudio').each(function(){ \n        var frame = document.getElementById(\"swThemeAudio\");\n        frame.contentWindow.postMessage(\n          '{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}',\n          '*'); \n    });\n  });\n\n  return (\n    <article>\n      <Crawl \n      title = {`Episode ${romanNum()}`}\n      subTitle={title}\n      text = {text + date}\n      />\n      <button className=\"hide-movie\" onClick={()=> hideLanding()}>Skip Movie Stuff</button>\n      <iframe width=\"2\" height=\"2\" src=\"https://www.youtube-nocookie.com/embed/EjMNNpIksaI?controls=1&autoplay=1&autohide=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    <div class=\"button\">\n        <button id=\"pause-button\">STOP AUDIO</button>\n    </div>\n    </article>\n  )\n}\n\nexport default OpeningCrawl;\n\nOpeningCrawl.propTypes = {\n  title: PropTypes.string.isRequired,\n  episode: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  hideLanding: PropTypes.func.isRequired\n}","import React from 'react';\nimport './Card.scss';\nimport Star from \"../../assets/star.svg\" \nimport PropTypes from 'prop-types'\nimport activeStar from \"../../assets/star-active.svg\"\n\nconst Card = ({ datum, favoriteStatus}) => {\n  return (\n    <article className='card'>\n      <div class=\"card-title\">\n        <h3>{datum[0]}</h3>\n          {!datum[6] &&\n          <img className=\"star-card-button\" src={Star} alt=\"\" onClick={() => favoriteStatus(datum)}/>}\n          {datum[6] &&\n            <img className=\"star-card-button\" src={activeStar} alt=\"\" onClick={() => favoriteStatus(datum)}/>}\n      </div>\n      <div className='card_content residents'>\n        <p>{datum[1]}</p>\n        <p>{datum[2]}</p>\n        <p>{datum[3]}</p>\n        <p className=\"residents\" >{datum[4]}</p>\n      </div>\n    </article>\n  )\n}\n\nexport default Card;\n\nCard.propTypes = {\n  data: PropTypes.array.isRequired,\n  favoriteStatus: PropTypes.func.isRequired\n}","import React from 'react';\nimport Card from '../Card/Card'\nimport './CardContainer.scss'\nimport PropTypes from 'prop-types'\n\nconst CardContainer = ({ data, favoriteCards, favoriteStatus }) => {\n  const card = data.map(datum => {\n    return <Card datum={datum} key={datum[5]} favoriteStatus={favoriteStatus} />\n  });\n  return (\n    <section className='card-components' >\n      {favoriteCards !== undefined && favoriteCards.length === 0 && <h1 className='favorites-message'>You do not have favorites</h1>}\n      {card}\n    </section>\n  )\n}\n\nexport default CardContainer;\n\n\nCardContainer.propTypes = {\n  data: PropTypes.array.isRequired,\n  favoriteCards: PropTypes.array.isRequired,\n  favoriteStatus: PropTypes.func.isRequired\n}","import React from 'react';\nimport './NotFound.scss';\n\nexport const NotFound = () => {\n  return (\n    <h1>We're sorry. The page you're looking for doesn't exist</h1>\n  )\n}","import React from 'react';\nimport './Home.scss';\n\nexport const Home = () => {\n  return (\n    <h1>Hello there! Pick a category!</h1>\n  )\n}","const fetchCalls = {\n  fetchMovies: () => {\n    return fetch('https://swapi.co/api/films')\n    .then(response => {\n      if(!response.ok) {\n        throw Error('there was a problem fetching your data')\n      }\n      return response.json()\n    })\n  },\n\n  fetchCharacters: () => {\n    return fetch('https://swapi.co/api/people/')\n    .then(response => {\n      if(!response.ok) {\n        throw Error('there was a problem fetching your data')\n      }\n      return response.json()\n    })\n  },\n\n  fetchPlanets: () => {\n    return fetch('https://swapi.co/api/planets/')\n    .then(response => {\n      if(!response.ok) {\n        throw Error('there was a problem fetching your data')\n      }\n      return response.json()\n    })\n  },\n\n  fetchVehicles: () => {\n    return fetch('https://swapi.co/api/vehicles')\n    .then(response => {\n      if(!response.ok) {\n        throw Error('there was a problem fetching your data')\n      }\n      return response.json()\n    })\n  },\n\n  fetchPeople: (people) => {\n    const promises = people.map(person => {\n      return fetch(person.homeworld)\n        .then(response => response.json())\n        .then(data => ({\n          homeworld: data.name,\n          population: data.population,\n          name: person.name,\n          species: person.species\n         }))\n        .catch(error => console.log(error));\n    });\n    return Promise.all(promises);\n  },\n\n fetchSpecies: (people) => {\n  const promises = people.map(person => {\n    return fetch(person.species)\n      .then(response => response.json())\n      .then(data => ({\n        ...person,\n        id: person.created,\n        species: data.name\n      }))\n      .catch(error => console.log(error));\n  });\n  return Promise.all(promises);\n}, \n\nfetchResidents: (planets) => {\n  const allPlanets = planets.map(planet => {\n    const residents = planet.residents.map(resident => {\n      return fetch(resident)\n      .then(response => response.json())\n      .then(data => data.name)\n      .catch(error => console.log({ error }))\n    });\n    return Promise.all(residents)\n      .then(residents => ({\n        name: planet.name,\n        terrain: planet.terrain,\n        population: planet.population,\n        climate: planet.climate,\n        residents: residents\n      }))\n  });\n  return Promise.all(allPlanets)\n  }\n}\n\nexport default fetchCalls;","const cleaner = {\n  cleanPeople: (people) => {\n    return people.map( people => {\n      const cleanData = [\n        people.name,\n        `Homeworld: ${people.homeworld}`,\n        `Species: ${people.species}`,\n        `Population: ${people.population}`,\n        null,\n        people.created,\n        false\n      ]\n      return cleanData\n    })\n  },\n\n  cleanPlanets: (planets) => {\n    return planets.map(planet => {\n      const cleanData = [\n        planet.name,\n        `Terrain: ${planet.terrain}`,\n        `Population: ${planet.population}`,\n        `Climate: ${planet.climate}`,\n        `Residents: ${planet.residents}`,\n        planet.created,\n        false\n      ]\n      return cleanData\n    })\n  },\n\n  cleanVehicles: (vehicles) => {\n    return vehicles.results.map(vehicle => {\n      const cleanData = [\n        vehicle.name,\n        `Model: ${vehicle.model}`,\n        `Class: ${vehicle.vehicle_class}`,\n        `Passengers: ${vehicle.passengers}`, \n        null,\n        vehicle.created,\n        false\n      ]\n      return cleanData\n    })\n  }\n}\n\n\nexport default cleaner;","import React, { Component } from 'react';\nimport './App.scss';\nimport OpeningCrawl from '../OpeningCrawl/OpeningCrawl';\nimport CardContainer from '../CardContainer/CardContainer';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { NotFound } from '../NotFound/NotFound'\nimport { Home } from '../Home/Home'\nimport fetchCalls from '../../apiCalls/apiCalls'\nimport cleaner from '../../cleanData/cleanData'\nimport loader from '../../assets/loading.gif' \nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n    filmData: [],\n    peopleData: [],\n    planetData: [],\n    vehicleData: [],\n    favoriteCards: [],\n    landingPage: true,\n    error: ''\n    }\n  }\n\n  hideLanding = () => {\n    this.setState({ landingPage: false })\n  }\n\n  showLanding = () => {\n    this.setState({ landingPage: true })\n  }\n\n  updateFavoriteCard = (favoriteStatus) => {\n    if(!this.state.favoriteCards.includes(favoriteStatus)) {\n      favoriteStatus[6] = !favoriteStatus[6]\n      this.setState({ favoriteCards: [...this.state.favoriteCards, favoriteStatus]});\n    } else {\n      favoriteStatus[6] = !favoriteStatus[6];\n      const removeCard = this.state.favoriteCards.filter(card => card !== favoriteStatus)\n      this.setState({ favoriteCards: removeCard });\n    } \n  }\n  componentDidMount() { \n      const number =  Math.floor(Math.random() * (6 - 2 + 1)) + 1\n      fetchCalls.fetchMovies()\n      .then(data => this.setMovie(data.results[number]))\n      .catch(error => this.setState({ error }))\n\n      fetchCalls.fetchCharacters()\n      .then(data => fetchCalls.fetchPeople(data.results))\n      .then(data => fetchCalls.fetchSpecies(data))\n      .then(data => cleaner.cleanPeople(data))\n      .then(peopleData => this.setPeople(peopleData))\n      .catch(error => this.setState({ error }))\n\n\n      fetchCalls.fetchPlanets()\n      .then(data => fetchCalls.fetchResidents(data.results))\n      .then(data => cleaner.cleanPlanets(data))\n      .then(planetData => this.setPlanets(planetData))\n      .catch(error => this.setState({ error }))\n\n\n      fetchCalls.fetchVehicles()\n      .then(data => cleaner.cleanVehicles(data))\n      .then(vehicleData => this.setVehicles(vehicleData))\n      .catch(error => this.setState({ error }))\n  }\n\n  setMovie = (filmData) => {\n    this.setState({ filmData })\n  }\n\n  setPeople = (peopleData) => {\n    this.setState({ peopleData })\n  }\n\n  setPlanets = (planetData) => {\n    this.setState({ planetData })\n  }\n\n  setVehicles = (vehicleData) => {\n    this.setState({ vehicleData })\n  }\n\n  render () {\n    const { filmData, peopleData, planetData, vehicleData, favoriteCards, landingPage} = this.state;\n    return (\n    \n      <main>\n        {landingPage && filmData.length !== 0 && \n          <OpeningCrawl \n          title={filmData.title} \n          date={filmData.release_date}\n          episode={filmData.episode_id}\n          text={filmData.opening_crawl} \n          hideLanding={this.hideLanding} />\n        }\n        {filmData.length === 0 && <img src={loader} className='loader'alt='Loading...'/>}\n        {!landingPage && \n        <>\n        <section className='idk-change-later'>\n        <button className='show-movie star-wars-text' onClick={this.showLanding}>\n          Show Movie Stuff\n        </button>\n          <h1 className='star-wars-text header'>SWAPI-BOX</h1>\n          <Link to='/favorites'>\n            <button className='favorites star-wars-text'>\n              Favorites <span> {favoriteCards.length}</span>\n            </button>\n          </Link>\n        </section>\n        <nav>\n          <Link to='/people'>\n            <button className='star-wars-text nav_button'>People</button>\n          </Link>\n          <Link to='/planets'>\n            <button className='star-wars-text nav_button'>Planets</button>\n          </Link>\n          <Link to='/vehicles'>\n            <button className='star-wars-text nav_button'>Vehicles</button>\n          </Link>\n        </nav>\n        <section>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/people' render={() => <CardContainer data={peopleData} favoriteStatus={this.updateFavoriteCard} />}/>\n            <Route exact path='/planets' render={() => <CardContainer data={planetData} favoriteStatus={this.updateFavoriteCard} />}/>\n            <Route exact path='/vehicles' render={() => <CardContainer data={vehicleData} favoriteStatus={this.updateFavoriteCard} />}/>\n            <Route exact path='/favorites' render={() => <CardContainer data={favoriteCards} favoriteCards={this.state.favoriteCards} favoriteStatus={this.updateFavoriteCard} />}/>\n            <Route component={NotFound} />\n          </Switch>\n        </section>\n        </>\n        }\n      </main>\n    )\n  }  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}